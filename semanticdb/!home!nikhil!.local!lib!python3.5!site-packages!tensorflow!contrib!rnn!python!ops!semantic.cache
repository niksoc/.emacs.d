;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Module implementing RNN Cells.\"\"\"" code nil nil [691 727])
            ("__future__" include nil nil [729 767])
            ("__future__" include nil nil [768 799])
            ("__future__" include nil nil [800 837])
            ("collections" include nil nil [839 857])
            ("math" include nil nil [858 869])
            ("tensorflow.python.framework" include nil nil [871 914])
            ("tensorflow.python.ops" include nil nil [915 958])
            ("tensorflow.python.ops" include nil nil [959 1001])
            ("tensorflow.python.ops" include nil nil [1002 1049])
            ("tensorflow.python.ops" include nil nil [1050 1092])
            ("tensorflow.python.ops" include nil nil [1093 1135])
            ("tensorflow.python.ops" include nil nil [1136 1176])
            ("tensorflow.python.ops" include nil nil [1177 1232])
            ("tensorflow.python.ops" include nil nil [1233 1287])
            ("tensorflow.python.ops.math_ops" include nil nil [1289 1339])
            ("tensorflow.python.ops.math_ops" include nil nil [1340 1387])
            ("tensorflow.python.ops.rnn_cell_impl" include nil nil [1388 1455])
            ("tensorflow.python.platform" include nil nil [1457 1517])
            ("tensorflow.python.util" include nil nil [1518 1557])
            ("BasicRNNCell" type
               (:documentation "The most basic RNN cell."
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1694 1793])
                            ("self" variable nil (reparse-symbol indented_block_body) [1797 1824])
                            ("self" variable nil (reparse-symbol indented_block_body) [1829 1858]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1638 1642])
                            ("num_units" variable nil (reparse-symbol function_parameters) [1644 1653])
                            ("input_size" variable nil (reparse-symbol function_parameters) [1655 1665])
                            ("activation" variable nil (reparse-symbol function_parameters) [1672 1682]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1625 1859])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1889 1893]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1862 1923])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1926 1988])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2004 2008])
                            ("inputs" variable nil (reparse-symbol function_parameters) [2010 2016])
                            ("state" variable nil (reparse-symbol function_parameters) [2018 2023])
                            ("scope" variable nil (reparse-symbol function_parameters) [2025 2030]))                          
                        :documentation "Most basic RNN: output = new_state = act(W * input + U * state + B).")
                        (reparse-symbol indented_block_body) [1991 2303]))                  
                :type "class")
                nil [1560 2303])
            ("GRUCell" type
               (:documentation "Gated Recurrent Unit cell (cf. http://arxiv.org/abs/1406.1078)."
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2473 2572])
                            ("self" variable nil (reparse-symbol indented_block_body) [2576 2603])
                            ("self" variable nil (reparse-symbol indented_block_body) [2608 2637]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2417 2421])
                            ("num_units" variable nil (reparse-symbol function_parameters) [2423 2432])
                            ("input_size" variable nil (reparse-symbol function_parameters) [2434 2444])
                            ("activation" variable nil (reparse-symbol function_parameters) [2451 2461]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2404 2638])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2668 2672]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2641 2702])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2733 2737]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2705 2767])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2783 2787])
                            ("inputs" variable nil (reparse-symbol function_parameters) [2789 2795])
                            ("state" variable nil (reparse-symbol function_parameters) [2797 2802])
                            ("scope" variable nil (reparse-symbol function_parameters) [2804 2809]))                          
                        :documentation "Gated recurrent unit (GRU) with nunits cells.")
                        (reparse-symbol indented_block_body) [2770 3561]))                  
                :type "class")
                nil [2305 3561])
            ("_LSTMStateTuple" variable nil nil [3563 3633])
            ("LSTMStateTuple" type
               (:documentation "Tuple used by LSTM Cells for `state_size`, `zero_state`, and output state.

  Stores two elements: `(c, h)`, in that order.

  Only used when `state_is_tuple=True`.
  "
                :superclasses ("_LSTMStateTuple")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3853 3867])
                    ("dtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3893 3897]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3871 4084]))                  
                :type "class")
                nil [3636 4084])
            ("BasicLSTMCell" type
               (:documentation "Basic LSTM recurrent network cell.

  The implementation is based on: http://arxiv.org/abs/1409.2329.

  We add forget_bias (default: 1) to the biases of the forget gate in order to
  reduce the scale of forgetting in the beginning of the training.

  It does not allow cell clipping, a projection layer, and does not
  use peep-hole connections: it is the basic baseline.

  For advanced models, please use the full LSTMCell that follows.
  "
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize the basic LSTM cell.

    Args:
      num_units: int, The number of units in the LSTM cell.
      forget_bias: float, The bias added to forget gates (see above).
      input_size: Deprecated and unused.
      state_is_tuple: If True, accepted and returned states are 2-tuples of
        the `c_state` and `m_state`.  If False, they are concatenated
        along the column axis.  The latter behavior will soon be deprecated.
      activation: Activation function of the inner states.
    \"\"\"" code nil (reparse-symbol indented_block_body) [4692 5198])
                            ("if" code nil (reparse-symbol indented_block_body) [5203 5372])
                            ("if" code nil (reparse-symbol indented_block_body) [5376 5475])
                            ("self" variable nil (reparse-symbol indented_block_body) [5479 5506])
                            ("self" variable nil (reparse-symbol indented_block_body) [5511 5542])
                            ("self" variable nil (reparse-symbol indented_block_body) [5547 5584])
                            ("self" variable nil (reparse-symbol indented_block_body) [5589 5618]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4583 4587])
                            ("num_units" variable nil (reparse-symbol function_parameters) [4589 4598])
                            ("forget_bias" variable nil (reparse-symbol function_parameters) [4600 4611])
                            ("input_size" variable nil (reparse-symbol function_parameters) [4617 4627])
                            ("state_is_tuple" variable nil (reparse-symbol function_parameters) [4649 4663])
                            ("activation" variable nil (reparse-symbol function_parameters) [4670 4680]))                          
                        :documentation "Initialize the basic LSTM cell.

    Args:
      num_units: int, The number of units in the LSTM cell.
      forget_bias: float, The bias added to forget gates (see above).
      input_size: Deprecated and unused.
      state_is_tuple: If True, accepted and returned states are 2-tuples of
        the `c_state` and `m_state`.  If False, they are concatenated
        along the column axis.  The latter behavior will soon be deprecated.
      activation: Activation function of the inner states.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4570 5619])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5649 5653]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5622 5779])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5810 5814]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5782 5844])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5860 5864])
                            ("inputs" variable nil (reparse-symbol function_parameters) [5866 5872])
                            ("state" variable nil (reparse-symbol function_parameters) [5874 5879])
                            ("scope" variable nil (reparse-symbol function_parameters) [5881 5886]))                          
                        :documentation "Long short-term memory cell (LSTM).")
                        (reparse-symbol indented_block_body) [5847 6773]))                  
                :type "class")
                nil [4086 6773])
            ("LSTMCell" type
               (:documentation "Long short-term memory unit (LSTM) recurrent network cell.

  The default non-peephole implementation is based on:

    http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf

  S. Hochreiter and J. Schmidhuber.
  \"Long Short-Term Memory\". Neural Computation, 9(8):1735-1780, 1997.

  The peephole implementation is based on:

    https://research.google.com/pubs/archive/43905.pdf

  Hasim Sak, Andrew Senior, and Francoise Beaufays.
  \"Long short-term memory recurrent neural network architectures for
   large scale acoustic modeling.\" INTERSPEECH, 2014.

  The class uses optional peep-hole connections, optional cell clipping, and
  an optional projection layer.
  "
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize the parameters for an LSTM cell.

    Args:
      num_units: int, The number of units in the LSTM cell
      input_size: Deprecated and unused.
      use_peepholes: bool, set True to enable diagonal/peephole connections.
      cell_clip: (optional) A float value, if provided the cell state is clipped
        by this value prior to the cell output activation.
      initializer: (optional) The initializer to use for the weight and
        projection matrices.
      num_proj: (optional) int, The output dimensionality for the projection
        matrices.  If None, no projection is performed.
      proj_clip: (optional) A float value.  If `num_proj > 0` and `proj_clip` is
        provided, then the projected values are clipped elementwise to within
        `[-proj_clip, proj_clip]`.
      num_unit_shards: Deprecated, will be removed by Jan. 2017.
        Use a variable_scope partitioner instead.
      num_proj_shards: Deprecated, will be removed by Jan. 2017.
        Use a variable_scope partitioner instead.
      forget_bias: Biases of the forget gate are initialized by default to 1
        in order to reduce the scale of forgetting at the beginning of
        the training.
      state_is_tuple: If True, accepted and returned states are 2-tuples of
        the `c_state` and `m_state`.  If False, they are concatenated
        along the column axis.  This latter behavior will soon be deprecated.
      activation: Activation function of the inner states.
    \"\"\"" code nil (reparse-symbol indented_block_body) [7797 9290])
                            ("if" code nil (reparse-symbol indented_block_body) [9295 9464])
                            ("if" code nil (reparse-symbol indented_block_body) [9468 9567])
                            ("if" code nil (reparse-symbol indented_block_body) [9571 9853])
                            ("self" variable nil (reparse-symbol indented_block_body) [9858 9885])
                            ("self" variable nil (reparse-symbol indented_block_body) [9890 9925])
                            ("self" variable nil (reparse-symbol indented_block_body) [9930 9957])
                            ("self" variable nil (reparse-symbol indented_block_body) [9962 9993])
                            ("self" variable nil (reparse-symbol indented_block_body) [9998 10023])
                            ("self" variable nil (reparse-symbol indented_block_body) [10028 10055])
                            ("self" variable nil (reparse-symbol indented_block_body) [10060 10099])
                            ("self" variable nil (reparse-symbol indented_block_body) [10104 10143])
                            ("self" variable nil (reparse-symbol indented_block_body) [10148 10179])
                            ("self" variable nil (reparse-symbol indented_block_body) [10184 10221])
                            ("self" variable nil (reparse-symbol indented_block_body) [10226 10255])
                            ("if" code nil (reparse-symbol indented_block_body) [10261 10605]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7498 7502])
                            ("num_units" variable nil (reparse-symbol function_parameters) [7504 7513])
                            ("input_size" variable nil (reparse-symbol function_parameters) [7515 7525])
                            ("use_peepholes" variable nil (reparse-symbol function_parameters) [7547 7560])
                            ("cell_clip" variable nil (reparse-symbol function_parameters) [7568 7577])
                            ("initializer" variable nil (reparse-symbol function_parameters) [7599 7610])
                            ("num_proj" variable nil (reparse-symbol function_parameters) [7617 7625])
                            ("proj_clip" variable nil (reparse-symbol function_parameters) [7632 7641])
                            ("num_unit_shards" variable nil (reparse-symbol function_parameters) [7663 7678])
                            ("num_proj_shards" variable nil (reparse-symbol function_parameters) [7685 7700])
                            ("forget_bias" variable nil (reparse-symbol function_parameters) [7722 7733])
                            ("state_is_tuple" variable nil (reparse-symbol function_parameters) [7739 7753])
                            ("activation" variable nil (reparse-symbol function_parameters) [7775 7785]))                          
                        :documentation "Initialize the parameters for an LSTM cell.

    Args:
      num_units: int, The number of units in the LSTM cell
      input_size: Deprecated and unused.
      use_peepholes: bool, set True to enable diagonal/peephole connections.
      cell_clip: (optional) A float value, if provided the cell state is clipped
        by this value prior to the cell output activation.
      initializer: (optional) The initializer to use for the weight and
        projection matrices.
      num_proj: (optional) int, The output dimensionality for the projection
        matrices.  If None, no projection is performed.
      proj_clip: (optional) A float value.  If `num_proj > 0` and `proj_clip` is
        provided, then the projected values are clipped elementwise to within
        `[-proj_clip, proj_clip]`.
      num_unit_shards: Deprecated, will be removed by Jan. 2017.
        Use a variable_scope partitioner instead.
      num_proj_shards: Deprecated, will be removed by Jan. 2017.
        Use a variable_scope partitioner instead.
      forget_bias: Biases of the forget gate are initialized by default to 1
        in order to reduce the scale of forgetting at the beginning of
        the training.
      state_is_tuple: If True, accepted and returned states are 2-tuples of
        the `c_state` and `m_state`.  If False, they are concatenated
        along the column axis.  This latter behavior will soon be deprecated.
      activation: Activation function of the inner states.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7485 10605])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10635 10639]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10608 10670])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10701 10705]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10673 10737])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10753 10757])
                            ("inputs" variable nil (reparse-symbol function_parameters) [10759 10765])
                            ("state" variable nil (reparse-symbol function_parameters) [10767 10772])
                            ("scope" variable nil (reparse-symbol function_parameters) [10774 10779]))                          
                        :documentation "Run one step of LSTM.

    Args:
      inputs: input Tensor, 2D, batch x num_units.
      state: if `state_is_tuple` is False, this must be a state Tensor,
        `2-D, batch x state_size`.  If `state_is_tuple` is True, this must be a
        tuple of state Tensors, both `2-D`, with column sizes `c_state` and
        `m_state`.
      scope: VariableScope for the created subgraph; defaults to \"lstm_cell\".

    Returns:
      A tuple containing:

      - A `2-D, [batch x output_dim]`, Tensor representing the output of the
        LSTM after reading `inputs` when previous state was `state`.
        Here output_dim is:
           num_proj if num_proj was set,
           num_units otherwise.
      - Tensor(s) representing the new state of LSTM after reading `inputs` when
        the previous state was `state`.  Same type and shape(s) as `state`.

    Raises:
      ValueError: If input size cannot be inferred from inputs via
        static shape inference.
    ")
                        (reparse-symbol indented_block_body) [10740 14741]))                  
                :type "class")
                nil [6775 14741])
            ("OutputProjectionWrapper" type
               (:documentation "Operator adding an output projection to the given cell.

  Note: in many cases it may be more efficient to not use this wrapper,
  but instead concatenate the whole sequence of your outputs in time,
  do the projection on this batch-concatenated sequence, then split it
  if needed or directly feed into a softmax.
  "
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a cell with output projection.

    Args:
      cell: an RNNCell, a projection to output_size is added to it.
      output_size: integer, the size of the output after projection.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if output_size is not positive.
    \"\"\"" code nil (reparse-symbol indented_block_body) [15155 15458])
                            ("if" code nil (reparse-symbol indented_block_body) [15463 15557])
                            ("if" code nil (reparse-symbol indented_block_body) [15561 15660])
                            ("self" variable nil (reparse-symbol indented_block_body) [15664 15681])
                            ("self" variable nil (reparse-symbol indented_block_body) [15686 15717]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15125 15129])
                            ("cell" variable nil (reparse-symbol function_parameters) [15131 15135])
                            ("output_size" variable nil (reparse-symbol function_parameters) [15137 15148]))                          
                        :documentation "Create a cell with output projection.

    Args:
      cell: an RNNCell, a projection to output_size is added to it.
      output_size: integer, the size of the output after projection.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if output_size is not positive.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15112 15718])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15748 15752]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15721 15788])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15819 15823]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15791 15855])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15871 15875])
                            ("inputs" variable nil (reparse-symbol function_parameters) [15877 15883])
                            ("state" variable nil (reparse-symbol function_parameters) [15885 15890])
                            ("scope" variable nil (reparse-symbol function_parameters) [15892 15897]))                          
                        :documentation "Run the cell and output projection on inputs, starting from state.")
                        (reparse-symbol indented_block_body) [15858 16249]))                  
                :type "class")
                nil [14743 16249])
            ("InputProjectionWrapper" type
               (:documentation "Operator adding an input projection to the given cell.

  Note: in many cases it may be more efficient to not use this wrapper,
  but instead concatenate the whole sequence of your inputs in time,
  do the projection on this batch-concatenated sequence, then split it.
  "
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a cell with input projection.

    Args:
      cell: an RNNCell, a projection of inputs is added before it.
      num_proj: Python integer.  The dimension to project to.
      input_size: Deprecated and unused.

    Raises:
      TypeError: if cell is not an RNNCell.
    \"\"\"" code nil (reparse-symbol indented_block_body) [16630 16915])
                            ("if" code nil (reparse-symbol indented_block_body) [16920 17019])
                            ("if" code nil (reparse-symbol indented_block_body) [17023 17117])
                            ("self" variable nil (reparse-symbol indented_block_body) [17121 17138])
                            ("self" variable nil (reparse-symbol indented_block_body) [17143 17168]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16586 16590])
                            ("cell" variable nil (reparse-symbol function_parameters) [16592 16596])
                            ("num_proj" variable nil (reparse-symbol function_parameters) [16598 16606])
                            ("input_size" variable nil (reparse-symbol function_parameters) [16608 16618]))                          
                        :documentation "Create a cell with input projection.

    Args:
      cell: an RNNCell, a projection of inputs is added before it.
      num_proj: Python integer.  The dimension to project to.
      input_size: Deprecated and unused.

    Raises:
      TypeError: if cell is not an RNNCell.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16573 17169])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17199 17203]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17172 17239])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17270 17274]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17242 17311])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17327 17331])
                            ("inputs" variable nil (reparse-symbol function_parameters) [17333 17339])
                            ("state" variable nil (reparse-symbol function_parameters) [17341 17346])
                            ("scope" variable nil (reparse-symbol function_parameters) [17348 17353]))                          
                        :documentation "Run the input projection and then the cell.")
                        (reparse-symbol indented_block_body) [17314 17635]))                  
                :type "class")
                nil [16251 17635])
            ("DropoutWrapper" type
               (:documentation "Operator adding dropout to inputs and outputs of the given cell."
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a cell with added input and/or output dropout.

    Dropout is never used on the state.

    Args:
      cell: an RNNCell, a projection to output_size is added to it.
      input_keep_prob: unit Tensor or float between 0 and 1, input keep
        probability; if it is float and 1, no input dropout will be added.
      output_keep_prob: unit Tensor or float between 0 and 1, output keep
        probability; if it is float and 1, no output dropout will be added.
      seed: (optional) integer, the randomness seed.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if keep_prob is not between 0 and 1.
    \"\"\"" code nil (reparse-symbol indented_block_body) [17843 18489])
                            ("if" code nil (reparse-symbol indented_block_body) [18494 18590])
                            ("if" code nil (reparse-symbol indented_block_body) [18594 18824])
                            ("if" code nil (reparse-symbol indented_block_body) [18828 19063])
                            ("self" variable nil (reparse-symbol indented_block_body) [19067 19084])
                            ("self" variable nil (reparse-symbol indented_block_body) [19089 19128])
                            ("self" variable nil (reparse-symbol indented_block_body) [19133 19174])
                            ("self" variable nil (reparse-symbol indented_block_body) [19179 19196]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17757 17761])
                            ("cell" variable nil (reparse-symbol function_parameters) [17763 17767])
                            ("input_keep_prob" variable nil (reparse-symbol function_parameters) [17769 17784])
                            ("output_keep_prob" variable nil (reparse-symbol function_parameters) [17790 17806])
                            ("seed" variable nil (reparse-symbol function_parameters) [17827 17831]))                          
                        :documentation "Create a cell with added input and/or output dropout.

    Dropout is never used on the state.

    Args:
      cell: an RNNCell, a projection to output_size is added to it.
      input_keep_prob: unit Tensor or float between 0 and 1, input keep
        probability; if it is float and 1, no input dropout will be added.
      output_keep_prob: unit Tensor or float between 0 and 1, output keep
        probability; if it is float and 1, no output dropout will be added.
      seed: (optional) integer, the randomness seed.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if keep_prob is not between 0 and 1.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17744 19197])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19227 19231]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19200 19267])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19298 19302]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19270 19339])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19355 19359])
                            ("inputs" variable nil (reparse-symbol function_parameters) [19361 19367])
                            ("state" variable nil (reparse-symbol function_parameters) [19369 19374])
                            ("scope" variable nil (reparse-symbol function_parameters) [19376 19381]))                          
                        :documentation "Run the cell with the declared dropouts.")
                        (reparse-symbol indented_block_body) [19342 19869]))                  
                :type "class")
                nil [17637 19869])
            ("EmbeddingWrapper" type
               (:documentation "Operator adding input embedding to the given cell.

  Note: in many cases it may be more efficient to not use this wrapper,
  but instead concatenate the whole sequence of your inputs in time,
  do the embedding on this batch-concatenated sequence, then split it and
  feed into your RNN.
  "
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a cell with an added input embedding.

    Args:
      cell: an RNNCell, an embedding will be put before its inputs.
      embedding_classes: integer, how many symbols will be embedded.
      embedding_size: integer, the size of the vectors we embed into.
      initializer: an initializer to use when creating the embedding;
        if None, the initializer from variable scope or a default one is used.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if embedding_classes is not positive.
    \"\"\"" code nil (reparse-symbol indented_block_body) [20290 20825])
                            ("if" code nil (reparse-symbol indented_block_body) [20830 20924])
                            ("if" code nil (reparse-symbol indented_block_body) [20928 21131])
                            ("self" variable nil (reparse-symbol indented_block_body) [21135 21152])
                            ("self" variable nil (reparse-symbol indented_block_body) [21157 21200])
                            ("self" variable nil (reparse-symbol indented_block_body) [21205 21242])
                            ("self" variable nil (reparse-symbol indented_block_body) [21247 21278]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20220 20224])
                            ("cell" variable nil (reparse-symbol function_parameters) [20226 20230])
                            ("embedding_classes" variable nil (reparse-symbol function_parameters) [20232 20249])
                            ("embedding_size" variable nil (reparse-symbol function_parameters) [20251 20265])
                            ("initializer" variable nil (reparse-symbol function_parameters) [20267 20278]))                          
                        :documentation "Create a cell with an added input embedding.

    Args:
      cell: an RNNCell, an embedding will be put before its inputs.
      embedding_classes: integer, how many symbols will be embedded.
      embedding_size: integer, the size of the vectors we embed into.
      initializer: an initializer to use when creating the embedding;
        if None, the initializer from variable scope or a default one is used.

    Raises:
      TypeError: if cell is not an RNNCell.
      ValueError: if embedding_classes is not positive.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20207 21279])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21309 21313]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21282 21349])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21380 21384]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21352 21421])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21437 21441])
                            ("inputs" variable nil (reparse-symbol function_parameters) [21443 21449])
                            ("state" variable nil (reparse-symbol function_parameters) [21451 21456])
                            ("scope" variable nil (reparse-symbol function_parameters) [21458 21463]))                          
                        :documentation "Run the cell on embedded inputs.")
                        (reparse-symbol indented_block_body) [21424 22489]))                  
                :type "class")
                nil [19871 22489])
            ("MultiRNNCell" type
               (:documentation "RNN cell composed sequentially of multiple simple cells."
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a RNN cell composed sequentially of a number of RNNCells.

    Args:
      cells: list of RNNCells that will be composed in this order.
      state_is_tuple: If True, accepted and returned states are n-tuples, where
        `n = len(cells)`.  If False, the states are all
        concatenated along the column axis.  This latter behavior will soon be
        deprecated.

    Raises:
      ValueError: if cells is empty (not allowed), or at least one of the cells
        returns a state tuple but the flag `state_is_tuple` is `False`.
    \"\"\"" code nil (reparse-symbol indented_block_body) [22640 23193])
                            ("if" code nil (reparse-symbol indented_block_body) [23198 23287])
                            ("self" variable nil (reparse-symbol indented_block_body) [23291 23310])
                            ("self" variable nil (reparse-symbol indented_block_body) [23315 23352])
                            ("if" code nil (reparse-symbol indented_block_body) [23357 23668]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22601 22605])
                            ("cells" variable nil (reparse-symbol function_parameters) [22607 22612])
                            ("state_is_tuple" variable nil (reparse-symbol function_parameters) [22614 22628]))                          
                        :documentation "Create a RNN cell composed sequentially of a number of RNNCells.

    Args:
      cells: list of RNNCells that will be composed in this order.
      state_is_tuple: If True, accepted and returned states are n-tuples, where
        `n = len(cells)`.  If False, the states are all
        concatenated along the column axis.  This latter behavior will soon be
        deprecated.

    Raises:
      ValueError: if cells is empty (not allowed), or at least one of the cells
        returns a state tuple but the flag `state_is_tuple` is `False`.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22588 23668])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23698 23702]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23671 23864])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23895 23899]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23867 23941])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23957 23961])
                            ("inputs" variable nil (reparse-symbol function_parameters) [23963 23969])
                            ("state" variable nil (reparse-symbol function_parameters) [23971 23976])
                            ("scope" variable nil (reparse-symbol function_parameters) [23978 23983]))                          
                        :documentation "Run this multi-layer cell on inputs, starting from state.")
                        (reparse-symbol indented_block_body) [23944 24960]))                  
                :type "class")
                nil [22491 24960])
            ("_SlimRNNCell" type
               (:documentation "A simple wrapper for slim.rnn_cells."
                :superclasses ("RNNCell")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a SlimRNNCell from a cell_fn.

    Args:
      cell_fn: a function which takes (inputs, state, scope) and produces the
        outputs and the new_state. Additionally when called with inputs=None and
        state=None it should return (initial_outputs, initial_state).

    Raises:
      TypeError: if cell_fn is not callable
      ValueError: if cell_fn cannot produce a valid initial state.
    \"\"\"" code nil (reparse-symbol indented_block_body) [25072 25483])
                            ("if" code nil (reparse-symbol indented_block_body) [25488 25580])
                            ("self" variable nil (reparse-symbol indented_block_body) [25584 25607])
                            ("self" variable nil (reparse-symbol indented_block_body) [25612 25651])
                            ("init_output, init_state" code nil (reparse-symbol indented_block_body) [25656 25707])
                            ("output_shape" variable nil (reparse-symbol indented_block_body) [25712 25750])
                            ("state_shape" variable nil (reparse-symbol indented_block_body) [25755 25791])
                            ("self" variable nil (reparse-symbol indented_block_body) [25796 25850])
                            ("self" variable nil (reparse-symbol indented_block_body) [25855 25907])
                            ("if" code nil (reparse-symbol indented_block_body) [25912 26075])
                            ("if" code nil (reparse-symbol indented_block_body) [26079 26239]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25052 25056])
                            ("cell_fn" variable nil (reparse-symbol function_parameters) [25058 25065]))                          
                        :documentation "Create a SlimRNNCell from a cell_fn.

    Args:
      cell_fn: a function which takes (inputs, state, scope) and produces the
        outputs and the new_state. Additionally when called with inputs=None and
        state=None it should return (initial_outputs, initial_state).

    Raises:
      TypeError: if cell_fn is not callable
      ValueError: if cell_fn cannot produce a valid initial state.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25039 26239])
                    ("state_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26269 26273]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26242 26304])
                    ("output_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26335 26339]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [26307 26371])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26387 26391])
                            ("inputs" variable nil (reparse-symbol function_parameters) [26393 26399])
                            ("state" variable nil (reparse-symbol function_parameters) [26401 26406])
                            ("scope" variable nil (reparse-symbol function_parameters) [26408 26413]))                          )
                        (reparse-symbol indented_block_body) [26374 26545]))                  
                :type "class")
                nil [24962 26545])
            ("_linear" function
               (:documentation "Linear map: sum_i(args[i] * W[i]), where W[i] is a variable.

  Args:
    args: a 2D Tensor or a list of 2D, batch x n, Tensors.
    output_size: int, second dimension of W[i].
    bias: boolean, whether to add a bias term or not.
    bias_start: starting value to initialize the bias; 0 by default.
    scope: (optional) Variable scope to create parameters in.

  Returns:
    A 2D Tensor with shape [batch x output_size] equal to
    sum_i(args[i] * W[i]), where W[i]s are newly created matrices.

  Raises:
    ValueError: if some of the arguments has unspecified or wrong shape.
  "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [26559 26563])
                    ("output_size" variable nil (reparse-symbol function_parameters) [26565 26576])
                    ("bias" variable nil (reparse-symbol function_parameters) [26578 26582])
                    ("bias_start" variable nil (reparse-symbol function_parameters) [26584 26594])
                    ("scope" variable nil (reparse-symbol function_parameters) [26600 26605]))                  )
                nil [26547 28543]))          
      :file "core_rnn_cell_impl.py"
      :pointmax 28543
      :fsize 28542
      :lastmodtime '(22715 43394 519862 413000)
      :unmatched-syntax '((NAME 11772 . 11780) (IF 11799 . 11801) (ELSE 11825 . 11829))))
  :file "!home!nikhil!.local!lib!python3.5!site-packages!tensorflow!contrib!rnn!python!ops!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
