;; Object tdb/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "tdb/"
  :tables
  (list
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Debugger for Tensorflow

import tfdebugger as td

\"\"\"" code nil nil [1 58])
            ("get_value" include nil nil [76 120])
            ("get_exe_queue" include nil nil [76 120])
            ("s" include nil nil [76 120])
            ("c" include nil nil [76 120])
            ("debug" include nil nil [76 120])
            ("plot_op" include nil nil [135 149])
            ("python_op" include nil nil [166 182])
            ("FINISHED" include nil nil [203 248])
            ("PAUSED" include nil nil [203 248])
            ("RUNNING" include nil nil [203 248])
            ("INITIALIZED" include nil nil [203 248])
            ("connect" include nil nil [259 286])
            ("is_notebook" include nil nil [259 286])
            ("connect" code nil nil [331 340]))          
      :file "__init__.py"
      :pointmax 341
      :fsize 340
      :lastmodtime '(22615 55833 80174 222000)
      :unmatched-syntax nil)
    (semanticdb-table "interface.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
top-level interface methods so user doesn't need to directly construct
a dbsession
\"\"\"" code nil nil [1 91])
            ("debug_session" include nil nil [100 120])
            ("_dbsession" variable nil nil [140 155])
            ("debug" function
               (:documentation "
	spawns a new debug session
	"
                :arguments 
                  ( ("evals" variable nil (reparse-symbol function_parameters) [167 172])
                    ("feed_dict" variable nil (reparse-symbol function_parameters) [173 182])
                    ("breakpoints" variable nil (reparse-symbol function_parameters) [188 199])
                    ("break_immediately" variable nil (reparse-symbol function_parameters) [205 222])
                    ("session" variable nil (reparse-symbol function_parameters) [229 236]))                  )
                nil [157 419])
            ("s" function (:documentation "
	step to the next node in the execution order
	") nil [420 527])
            ("c" function (:documentation "
	continue
	") nil [528 599])
            ("get_exe_queue" function nil nil [600 675])
            ("get_value" function (:arguments 
              ( ("node" variable nil (reparse-symbol function_parameters) [690 694]))              ) nil [676 751]))          
      :file "interface.py"
      :pointmax 751
      :fsize 750
      :lastmodtime '(22615 55397 852186 600000)
      :unmatched-syntax '((FROM 93 . 97) (PERIOD 98 . 99) ($EOI 751 . 751) (PERIOD 98 . 99)))
    (semanticdb-table "op_store.py"
      :major-mode 'python-mode
      :tags 
        '( ("toposort" include nil nil [1 48])
            ("tensorflow" include nil nil [100 123])
            ("_ops" variable nil nil [125 132])
            ("_placeholder_2_op" variable nil nil [160 180])
            ("add_op" function (:arguments 
              ( ("op" variable nil (reparse-symbol function_parameters) [235 237]))              ) nil [224 306])
            ("get_op" function (:arguments 
              ( ("placeholder" variable nil (reparse-symbol function_parameters) [318 329]))              ) nil [307 371])
            ("is_htop_out" function (:arguments 
              ( ("placeholder" variable nil (reparse-symbol function_parameters) [388 399]))              ) nil [372 502])
            ("compute_exe_order" function (:arguments 
              ( ("evals" variable nil (reparse-symbol function_parameters) [525 530]))              ) nil [503 735])
            ("get_node" function
               (:documentation "
	returns HTOp or tf graph element corresponding to requested node name
	"
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [749 753]))                  )
                nil [736 943])
            ("register_dbsession" function (:arguments 
              ( ("dbsession" variable nil (reparse-symbol function_parameters) [967 976]))              ) nil [944 1033])
            ("compute_node_deps" function (:documentation "
	- returns the full dependency graph of ALL ops and ALL tensors
	Map<string,list<string>> where key=node name, values=list of dependency names

	If an Op takes in a placeholder tensor that is the ouput of a PythonOp, 
	we need to replace that Placeholder with the PythonOp.
	") nil [1034 1819]))          
      :file "op_store.py"
      :pointmax 1819
      :fsize 1818
      :lastmodtime '(22615 55740 692176 850000)
      :unmatched-syntax nil)
    (semanticdb-table "plot_op.py"
      :major-mode 'python-mode
      :tags 
        '( ("COUNT" variable nil nil [2 9])
            ("PythonOp" include nil nil [27 42])
            ("inspect" include nil nil [43 57])
            ("matplotlib.pyplot" include nil nil [58 89])
            ("plot_op" function
               (:documentation "
	User-exposed api method for constructing a python_node

	Args:
	fn: python function that computes some np.ndarrays given np.ndarrays as inputs. it can have arbitrary side effects.
	inputs: array of tf.Tensors (optional). These are where fn derives its values from
	outputs: tf.Placeholder nodes (optional). These are constructed by the user (which allows the user to
		plug them into other ht.Ops or tf.Ops). The outputs of fn are mapped to each of the output placeholders.

	raises an Error if fn cannot map
	"
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [103 105])
                    ("inputs" variable nil (reparse-symbol function_parameters) [107 113])
                    ("outputs" variable nil (reparse-symbol function_parameters) [118 125]))                  )
                nil [91 1104])
            ("PlotOp" type
               (:superclasses ("PythonOp")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [1203 1263]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1143 1147])
                            ("fn" variable nil (reparse-symbol function_parameters) [1149 1151])
                            ("i" variable nil (reparse-symbol function_parameters) [1153 1154])
                            ("inputs" variable nil (reparse-symbol function_parameters) [1156 1162])
                            ("outputs" variable nil (reparse-symbol function_parameters) [1164 1171]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1130 1237])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1249 1253])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [1255 1264]))                          )
                        (reparse-symbol indented_block_body) [1241 1472]))                  
                :type "class")
                nil [1105 1472]))          
      :file "plot_op.py"
      :pointmax 1472
      :fsize 1471
      :lastmodtime '(22615 56243 864162 540000)
      :unmatched-syntax nil)
    (semanticdb-table "python_op.py"
      :major-mode 'python-mode
      :tags 
        '( ("COUNT" variable nil nil [2 9])
            ("HTOp" include nil nil [23 34])
            ("inspect" include nil nil [35 49])
            ("numpy" include nil nil [50 68])
            ("python_op" function
               (:documentation "
	User-exposed api method for constructing a python_node

	Args:
	fn: python function that computes some np.ndarrays given np.ndarrays as inputs. it can have arbitrary side effects.
	inputs: array of tf.Tensors (optional). These are where fn derives its values from
	outputs: tf.Placeholder nodes (optional). These are constructed by the user (which allows the user to
		plug them into other ht.Ops or tf.Ops). The outputs of fn are mapped to each of the output placeholders.

	raises an Error if fn cannot map
	"
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [84 86])
                    ("inputs" variable nil (reparse-symbol function_parameters) [88 94])
                    ("outputs" variable nil (reparse-symbol function_parameters) [101 108]))                  )
                nil [70 1048])
            ("PythonOp" type
               (:documentation "docstring for PythonOp"
                :superclasses ("HTOp")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
		constructor. user does not call this.
		\"\"\"" code nil (reparse-symbol indented_block_body) [1182 1231])
                            ("super" code nil (reparse-symbol indented_block_body) [1234 1295])
                            ("self" variable nil (reparse-symbol indented_block_body) [1298 1308]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1115 1119])
                            ("node_type" variable nil (reparse-symbol function_parameters) [1121 1130])
                            ("fn" variable nil (reparse-symbol function_parameters) [1132 1134])
                            ("i" variable nil (reparse-symbol function_parameters) [1136 1137])
                            ("inputs" variable nil (reparse-symbol function_parameters) [1139 1145])
                            ("outputs" variable nil (reparse-symbol function_parameters) [1147 1154]))                          
                        :documentation "
		constructor. user does not call this.
		"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1102 1286])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1298 1302])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [1304 1313]))                          )
                        (reparse-symbol indented_block_body) [1290 1460])
                    ("cache_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1479 1483])
                            ("results" variable nil (reparse-symbol function_parameters) [1485 1492]))                          
                        :documentation "
		loads into DebugSession cache
		")
                        (reparse-symbol indented_block_body) [1462 2309]))                  
                :type "class")
                nil [1049 2309]))          
      :file "python_op.py"
      :pointmax 2309
      :fsize 2308
      :lastmodtime '(22615 55865 156173 310000)
      :unmatched-syntax nil)
    (semanticdb-table "debug_session.py"
      :major-mode 'python-mode
      :tags 
        '( ("HTOp" include nil nil [14 25])
            ("tensorflow" include nil nil [49 72])
            ("INITIALIZED" variable nil nil [95 122])
            ("RUNNING" variable nil nil [123 142])
            ("PAUSED" variable nil nil [143 160])
            ("FINISHED" variable nil nil [161 182])
            ("DebugSession" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [244 280])
                            ("if" code nil (reparse-symbol indented_block_body) [286 341])
                            ("_original_evals" variable nil (reparse-symbol indented_block_body) [343 363])
                            ("self" variable nil (reparse-symbol indented_block_body) [366 377])
                            ("self" variable nil (reparse-symbol indented_block_body) [409 429])
                            ("self" variable nil (reparse-symbol indented_block_body) [432 454])
                            ("self" variable nil (reparse-symbol indented_block_body) [457 480])
                            ("self" variable nil (reparse-symbol indented_block_body) [524 543])
                            ("self" variable nil (reparse-symbol indented_block_body) [573 590])
                            ("self" variable nil (reparse-symbol indented_block_body) [612 626])
                            ("self" variable nil (reparse-symbol indented_block_body) [672 690]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228 232])
                            ("session" variable nil (reparse-symbol function_parameters) [234 241]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [215 742])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [786 790])
                            ("evals" variable nil (reparse-symbol function_parameters) [792 797])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [799 808])
                            ("breakpoints" variable nil (reparse-symbol function_parameters) [815 826])
                            ("break_immediately" variable nil (reparse-symbol function_parameters) [833 850]))                          
                        :documentation "
		starts the debug session
		")
                        (reparse-symbol indented_block_body) [778 1457])
                    ("s" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1465 1469]))                          
                        :documentation "
		step to the next node in the execution order
		")
                        (reparse-symbol indented_block_body) [1459 1808])
                    ("c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1816 1820]))                          
                        :documentation "
		continue
		")
                        (reparse-symbol indented_block_body) [1810 2141])
                    ("get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2158 2162]))                          
                        :documentation "
		returns final values (same result as tf.Session.run())
		")
                        (reparse-symbol indented_block_body) [2143 2304])
                    ("get_exe_queue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2325 2329]))                          )
                        (reparse-symbol indented_block_body) [2307 2369])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2385 2389])
                            ("node" variable nil (reparse-symbol function_parameters) [2391 2395]))                          
                        :documentation "
		retrieve a node value from the cache
		")
                        (reparse-symbol indented_block_body) [2371 2654])
                    ("_cache_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2708 2712])
                            ("tensor" variable nil (reparse-symbol function_parameters) [2714 2720])
                            ("ndarray" variable nil (reparse-symbol function_parameters) [2722 2729]))                          
                        :documentation "
		store tensor ndarray value in cache. this is called by python ops
		")
                        (reparse-symbol indented_block_body) [2691 2847])
                    ("_init_evals_bps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2869 2873])
                            ("evals" variable nil (reparse-symbol function_parameters) [2875 2880])
                            ("breakpoints" variable nil (reparse-symbol function_parameters) [2882 2893]))                          )
                        (reparse-symbol indented_block_body) [2849 4177])
                    ("_get_next_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4198 4202]))                          )
                        (reparse-symbol indented_block_body) [4179 4362])
                    ("_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4374 4378])
                            ("node" variable nil (reparse-symbol function_parameters) [4380 4384]))                          
                        :documentation "
		node is a TensorFlow Op or Tensor from self._exe_order
		")
                        (reparse-symbol indented_block_body) [4364 5274])
                    ("_break" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5292 5296])
                            ("value" variable nil (reparse-symbol function_parameters) [5297 5302]))                          )
                        (reparse-symbol indented_block_body) [5281 5455])
                    ("_finish" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5469 5473]))                          )
                        (reparse-symbol indented_block_body) [5457 5539]))                  
                :type "class")
                nil [184 5539]))          
      :file "debug_session.py"
      :pointmax 5540
      :fsize 5539
      :lastmodtime '(22615 55671 348178 822000)
      :unmatched-syntax nil)
    (semanticdb-table "app.py"
      :major-mode 'python-mode
      :tags 
        '( ("base64" include nil nil [1 29])
            ("ipykernel.comm" include nil nil [30 61])
            ("IPython" include nil nil [63 94])
            ("urllib" include nil nil [95 108])
            ("_comm" variable nil nil [110 120])
            ("is_notebook" function nil nil [122 262])
            ("connect" function (:documentation "
	establish connection to frontend notebook
	") nil [263 650])
            ("send_action" function
               (:documentation "
	helper method for sending actions
	"
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [667 673])
                    ("params" variable nil (reparse-symbol function_parameters) [675 681]))                  )
                nil [651 845])
            ("send_fig" function
               (:documentation "
	sends figure to frontend
	"
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [859 862])
                    ("name" variable nil (reparse-symbol function_parameters) [863 867]))                  )
                nil [846 1134])
            ("handle_comm_opened" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [1177 1180]))              ) nil [1154 1254]))          
      :file "app.py"
      :pointmax 1254
      :fsize 1253
      :lastmodtime '(22615 56109 436166 363000)
      :unmatched-syntax nil)
    (semanticdb-table "transitive_closure.py"
      :file "transitive_closure.py"
      :fsize 583
      :lastmodtime '(22596 48110 930027 246000)))
  :file "!home!nikhil!mystuff!Workspaces!tensorflow!lib!python3.4!site-packages!tdb!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
