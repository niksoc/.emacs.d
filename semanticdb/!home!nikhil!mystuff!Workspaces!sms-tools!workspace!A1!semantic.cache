;; Object A1/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "A1/"
  :tables
  (list
    (semanticdb-table "A1Part1.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("os" include nil nil [12 21])
            ("sys" code nil nil [22 63])
            ("utilFunctions" include nil nil [64 97])
            ("\"\"\"
A1-Part-1: Reading an audio file

Write a function that reads an audio file and returns 10 consecutive samples of the file starting from 
the 50001th sample. This means that the output should exactly contain the 50001th sample to the 50010th 
sample (10 samples). 

The input to the function is the file name (including the path) and the output should be a numpy array 
containing 10 samples.

If you use the wavread function from the utilFunctions module the input samples will be automatically 
converted to floating point numbers with a range from -1 to 1, which is what we want. 

Remember that in python, the index of the first sample of an array is 0 and not 1.

If you run your code using piano.wav as the input, the function should return the following 10 samples:  
array([-0.06213569, -0.04541154, -0.02734458, -0.0093997 ,  0.00769066,	0.02319407,  0.03503525, 
0.04309214, 0.04626606,  0.0441908], dtype=float32)
\"\"\"" code nil nil [99 1031])
            ("readAudio" function
               (:documentation "
    Input:
        inputFile: the path to the wav file      
    Output:
        The function should return a numpy array that contains 10 samples of the audio.
    "
                :arguments 
                  ( ("inputFile" variable nil (reparse-symbol function_parameters) [1047 1056]))                  )
                nil [1033 1315]))          
      :file "A1Part1.py"
      :pointmax 1316
      :fsize 1315
      :lastmodtime '(22618 42675 9660 315000)
      :unmatched-syntax nil)
    (semanticdb-table "A1Part2.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("os" include nil nil [12 21])
            ("sys" code nil nil [22 63])
            ("utilFunctions" include nil nil [64 97])
            ("\"\"\"
A1-Part-2: Basic operations with audio

Write a function that reads an audio file and returns the minimum and the maximum values of the audio 
samples in that file. 

The input to the function is the wav file name (including the path) and the output should be two floating 
point values returned as a tuple.

If you run your code using oboe-A4.wav as the input, the function should return the following output:  
(-0.83486432, 0.56501967)
\"\"\"" code nil nil [99 545])
            ("minMaxAudio" function
               (:documentation "
    Input:
        inputFile: file name of the wav file (including path)
    Output:
        A tuple of the minimum and the maximum value of the audio samples, like: (min_val, max_val)
    "
                :arguments 
                  ( ("inputFile" variable nil (reparse-symbol function_parameters) [562 571]))                  )
                nil [546 883]))          
      :file "A1Part2.py"
      :pointmax 883
      :fsize 882
      :lastmodtime '(22618 42955 621652 334000)
      :unmatched-syntax nil)
    (semanticdb-table "A1Part3.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
A1-Part-3: Python array indexing

Write a function that given a numpy array x, returns every Mth element in x, starting from the 
first element.  

The input arguments to this function are a numpy array x and a positive integer M such that M < number of 
elements in x. The output of this function should be a numpy array.

If you run your code with x = np.arange(10) and M = 2, the function should return the following output: 
array([0, 2, 4, 6, 8]).
\"\"\"" code nil nil [1 461])
            ("hopSamples" function
               (:documentation "
    Inputs:
        x: input numpy array
        M: hop size (positive integer)
    Output:
        A numpy array containing every Mth element in x, starting from the first element in x.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [477 478])
                    ("M" variable nil (reparse-symbol function_parameters) [479 480]))                  )
                nil [462 726]))          
      :file "A1Part3.py"
      :pointmax 733
      :fsize 732
      :lastmodtime '(22618 43044 205649 815000)
      :unmatched-syntax nil)
    (semanticdb-table "A1Part4.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [1 11])
            ("os" include nil nil [12 21])
            ("sys" code nil nil [22 63])
            ("utilFunctions" include nil nil [64 107])
            ("A1Part3" include nil nil [108 138])
            ("\"\"\"
A1-Part-4: Downsampling audio: Changing the sampling rate

One of the required processes to represent a signal inside a computer is sampling. The sampling rate is the number of samples obtained in one second when sampling a continuous analog signal to a discrete digital signal. As mentioned earlier, most of the time we will be working with wav audio files that have a sampling rate of 44100 Hz, which is a typical value. For some applications, changing the sampling rate of an audio signal can be necessary. This optional part shows how to do this, from a higher sampling rate to a lower one.

Complete the function downsampleAudio(inputFile,M) in the file A1Part4.py so that given an audio file, it applies downsampling by a factor of M and create a wav audio file <input_name>_downsampled.wav at a lower sampling rate.

In Part1 you learned how to read a wav file and the function from Part3 can be used to perform the downsampling of a signal contained in an array. To create a wav audio file from an array, you can use the wavwrite function from the utilFunctions module. Be careful with the sampling rate parameter since it should be different from that of the original audio.

You can test your code using the file `vibraphone-C6.wav' and a downsampling factor of M=16. 
Listen to the `vibraphone-C6_downsampled.wav' sound. What happened to the signal?
How could we avoid damaging the signal when downsampling it?
You can find some related information in https://en.wikipedia.org/wiki/Decimation_%28signal_processing%29.
\"\"\"" code nil nil [140 1676])
            ("downsampleAudio" function
               (:documentation "
    Inputs:
        inputFile: file name of the wav file (including path)
        	M: downsampling factor (positive integer)
    "
                :arguments 
                  ( ("inputFile" variable nil (reparse-symbol function_parameters) [1698 1707])
                    ("M" variable nil (reparse-symbol function_parameters) [1709 1710]))                  )
                nil [1678 2005]))          
      :file "A1Part4.py"
      :pointmax 2005
      :fsize 2004
      :lastmodtime '(22618 43612 677633 648000)
      :unmatched-syntax nil))
  :file "!home!nikhil!mystuff!Workspaces!sms-tools!workspace!A1!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
